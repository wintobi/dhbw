import { DoCheck, ElementRef, EventEmitter, IterableDiffers, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Form, InfiniteScroll, Item, ModalController, Platform } from 'ionic-angular';
import { SelectSearchablePageComponent } from './select-searchable-page.component';
export declare class SelectSearchableComponent implements ControlValueAccessor, OnInit, OnDestroy, DoCheck {
    private _modalController;
    private ionForm;
    private _platform;
    private ionItem;
    private _iterableDiffers;
    private element;
    private _cssClass;
    _isIos: boolean;
    _isMD: boolean;
    private readonly _isMultipleCssClass;
    private readonly _hasValueCssClass;
    private readonly _hasPlaceholderCssClass;
    private _isOnSearchEnabled;
    private _isEnabled;
    private _isOpened;
    private _valueItems;
    private _value;
    private _modal;
    private _itemsDiffer;
    private _hasObjects;
    private _canClear;
    private _isMultiple;
    private _canAddItem;
    private _addItemObservable;
    private _deleteItemObservable;
    private onItemsChange;
    readonly _shouldStoreItemValue: boolean;
    _searchText: string;
    _hasSearchText: boolean;
    _groups: any[];
    _itemsToConfirm: any[];
    _selectedItems: any[];
    _selectPageComponent: SelectSearchablePageComponent;
    _filteredGroups: any[];
    _hasGroups: boolean;
    _isSearching: boolean;
    _labelText: string;
    _hasPlaceholder: boolean;
    _infiniteScroll: InfiniteScroll;
    _isAddItemTemplateVisible: boolean;
    _isFooterVisible: boolean;
    _itemToAdd: any;
    _footerButtonsCount: number;
    readonly searchText: string;
    readonly isSearching: boolean;
    readonly hasSearchText: boolean;
    value: any;
    items: any[];
    itemsChange: EventEmitter<any>;
    isEnabled: boolean;
    readonly isOpened: boolean;
    isOkButtonEnabled: boolean;
    itemValueField: string;
    itemTextField: string;
    groupValueField: string;
    groupTextField: string;
    canSearch: boolean;
    isOnSearchEnabled: boolean;
    canClear: boolean;
    hasInfiniteScroll: boolean;
    hasVirtualScroll: boolean;
    virtualScrollApproxItemHeight: string;
    virtualScrollApproxItemWidth: string;
    virtualScrollBufferRatio: number;
    virtualScrollHeaderFn: () => any;
    searchPlaceholder: string;
    placeholder: string;
    isMultiple: boolean;
    searchFailText: string;
    clearButtonText: string;
    addButtonText: string;
    okButtonText: string;
    closeButtonText: string;
    focusSearchbar: boolean;
    headerColor: string;
    groupColor: string;
    onChange: EventEmitter<any>;
    onSearch: EventEmitter<any>;
    onSearchFail: EventEmitter<any>;
    onSearchSuccess: EventEmitter<any>;
    onInfiniteScroll: EventEmitter<any>;
    onOpen: EventEmitter<any>;
    onClose: EventEmitter<any>;
    valueTemplate: TemplateRef<any>;
    itemTemplate: TemplateRef<any>;
    itemRightTemplate: TemplateRef<any>;
    titleTemplate: TemplateRef<any>;
    placeholderTemplate: TemplateRef<any>;
    messageTemplate: TemplateRef<any>;
    groupTemplate: TemplateRef<any>;
    groupRightTemplate: TemplateRef<any>;
    closeButtonTemplate: TemplateRef<any>;
    searchFailTemplate: TemplateRef<any>;
    addItemTemplate: TemplateRef<any>;
    readonly itemsToConfirm: any[];
    searchDebounce: Number;
    disabledItems: any[];
    shouldStoreItemValue: boolean;
    canSaveItem: boolean;
    canDeleteItem: boolean;
    canAddItem: boolean;
    onSaveItem: EventEmitter<any>;
    onDeleteItem: EventEmitter<any>;
    onAddItem: EventEmitter<any>;
    constructor(_modalController: ModalController, ionForm: Form, _platform: Platform, ionItem: Item, _iterableDiffers: IterableDiffers, element: ElementRef);
    initFocus(): void;
    enableIonItem(isEnabled: boolean): void;
    _click(event: UIEvent): void;
    _isNullOrWhiteSpace(value: any): boolean;
    _setHasSearchText(): void;
    _hasOnSearch(): boolean;
    _hasOnSaveItem(): boolean;
    _hasOnAddItem(): boolean;
    _hasOnDeleteItem(): boolean;
    _select(selectedItem: any): void;
    _emitValueChange(): void;
    _emitSearch(): void;
    _formatItem(item: any): string;
    _getLabelText(): string;
    _getItemValue(item: any): any;
    _getStoredItemValue(item: any): any;
    _filterItems(): void;
    _isItemDisabled(item: any): boolean;
    _isItemSelected(item: any): boolean;
    _addSelectedItem(item: any): void;
    _deleteSelectedItem(item: any): void;
    _saveItem(event: Event, item: any): void;
    _deleteItemClick(event: Event, item: any): void;
    _addItemClick(): void;
    private _countFooterButtons();
    private _areGroupsEmpty(groups);
    private _setItems(items);
    private _formatValueItem(item);
    private _getPropertyValue(object, property);
    private _setIonItemHasFocus(hasFocus);
    private _setIonItemHasValue();
    private _setHasPlaceholder();
    private propagateOnChange;
    private propagateOnTouched;
    private _setIonItemValidityClasses();
    private _toggleAddItemTemplate(isVisible);
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngDoCheck(): void;
    addItem(item: any): Promise<any>;
    deleteItem(item: any): Promise<any>;
    hasValue(): boolean;
    open(): Promise<any>;
    close(): Promise<any>;
    clear(): void;
    scrollToTop(): Promise<any>;
    scrollToBottom(): Promise<any>;
    startSearch(): void;
    endSearch(): void;
    enableInfiniteScroll(): void;
    disableInfiniteScroll(): void;
    endInfiniteScroll(): void;
    search(text: string): void;
    showLoading(): void;
    hideLoading(): void;
    showAddItemTemplate(): void;
    hideAddItemTemplate(): void;
}
